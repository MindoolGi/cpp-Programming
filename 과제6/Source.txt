#include <iostream>
#include <string>
#include <vector>
using namespace std;

class Shape {
protected:
	virtual void draw() = 0;
public:
	virtual ~Shape() {}
	void paint() { draw(); }
};

class Circle : public Shape {
protected:
	virtual void draw() {
		cout << "Circle" << endl;
	}
};

class Rect : public Shape {
protected:
	virtual void draw() {
		cout << "Rect" << endl;
	}
};

class Line : public Shape {
protected:
	virtual void draw() {
		cout << "Line" << endl;
	}
};

class UI {
public:
	static int MainMenu() {
		int n;
		cout << "삽입:1, 삭제:2, 모두보기:3, 종료:4 >> ";
		cin >> n;
		return n;
	}

	static int ShapeType() {
		int n;
		cout << "선:1, 원:2, 사각형:3 >> ";
		cin >> n;
		return n;
	}

	static int ShapeDelete() {
		int n;
		cout << "삭제하고자 하는 도형의 인덱스 >> ";
		cin >> n;
		return n;
	}
};

class GraphicEditor {
	vector<Shape*> shapes;
public:
	GraphicEditor() {
		cout << "그래픽 에디터입니다." << endl;
	}

	~GraphicEditor() {
		for (Shape* shape : shapes) {
			delete shape;
		}
	}

	void create(int num){
		Shape* newShape = nullptr;
		switch (num) {
		case 1:
			newShape = new Line();
			break;
		case 2:
			newShape = new Circle();
			break;
		case 3:
			newShape = new Rect();
			break;
		default:
			cout << "잘못된 도형입니다." << endl;
			return;
		}
		shapes.push_back(newShape);
	}

	void del(int index) {
		if (index < 0 || index >= shapes.size()) {
			cout << "잘못된 숫자입니다." << endl;
			return;
		}
		delete shapes[index];
		shapes.erase(shapes.begin() + index);
	}

	void showALL() const {
		if (shapes.empty()) {
			cout << "도형이 존재하지 않음." << endl;
			return;
		}
		for (int i = 0; i < shapes.size(); ++i) {
			cout << i << ": ";
			shapes[i]->paint();
		}
	}

	void call() {
		bool exit = false;
		while (!exit) {
			int menu = UI::MainMenu();
			switch (menu) {
			case 1: // 1:삽입 2:삭제 3:모두보기 4:종료
				create(UI::ShapeType());
				break;
			case 2:
				del(UI::ShapeDelete());
				break;
			case 3:
				showALL();
				break;
			case 4:
				exit = true;
				break;
			default:
				cout << "잘못된 메뉴 선택입니다." << endl;
			}
		}
	}
};


int main() {
	GraphicEditor editor;
	editor.call();
	return 0;
}